const mongoose = require('mongoose');
const { Schema } = mongoose; //equivalent to const Schema =  mongoose.Schema;
const NotarySchema = require('./Notary');
const SyndicSchema = require('./Syndic');

const propertyCaseSchema = new Schema({
     personalContribution: Number,
     strongPointArea: String,
     weakPointArea: String,
     compromisPdf: String,
     diagnosticPdf: String,
     preEtatDatePdf: String,
     etatDatePdf: String,
     appelDeFondPdf: String,
     propertyTax: Number,
     propertyTaxPdf: String,
     mortGageContractPdf: String,
     floor: Number,
     door: String,
     street: String,
     postalCode: Number,
     city: String,
     propertyOrientation: String,
     balcony: { type: Boolean, default: false },
     garden: { type: Boolean, default: false },
     gardenSquare: Number,
     cave: { type: Boolean, default: false },
     garage: String,
     propertySquareRoot: Number,
     roomNumber: Number,
     propertyKind: String,
     propertyImages: [String],
     estimationImages: [String],
     transactionDate: Date,
     transactionPrice: Number,
     carrezLawPdf: String,
     mandateKind: String,
     estimation: Number,
     estimationComment: String,
     lastPropertyPrice: Number,
     lastPropertySellDate: Date,
     lastWorksDone: String,
     worksToBeDone: String,
     realizedWorks: String,
     notaryVendor: NotarySchema,
     notaryBuyer: NotarySchema,
     syndic: SyndicSchema,
     caseClosed: { type: Boolean, default: false },
     propertyTransactionKind: String,
     civility: String,
     name: String,
     name2: String,
     name3: String,
     surname: String,
     propertyDebt: Number,
     womenSurname: String,
     birthday: Date,
     phoneNumber: String,
     email: String,
     streetOther: String,
     postalCodeOther: Number,
     cityOther: String,
     comment: String,
     _user: { type: Schema.Types.ObjectId, ref: 'User' },
});

mongoose.model('propertyCases', propertyCaseSchema); //don't do anything if collection already exists if the same.
